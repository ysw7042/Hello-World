● 리터럴과 변수

  - 리터럴(Literal) : 절대 변하지 않는 값(Value)
  
  - 변수(Varable) : 값을 저장하기 위한 메모리에 부여한 이름
  
  형식) 자료형 변수명;
  
     >> 자료형 : 변수에 저장될 값의 데이타유형 - 기본형(키워드) 또는 참조형(식별자) 
     
     >> 변수명 : 값을 저장하기 위한 이름 - 식별자
     
  ※ 식별자 작성 규칙   
    
     - 영문자,숫자,특수문자(_ 또는 $)만 사용 가능(문자에 대한 유니코드 표현으로 인해 한글도 사용 가능)
     - 숫자로 시작해서는 안된다.
     - 영문자는 대소문자를 구분한다.
     - 이미 선언된 식별자를 다시 사용할 수 없다.(키워드 사용 불가)
	
	=>카멜 표기법(CamelCase) : 첫번째 단어를 제외한 모든 단어의 첫문자를 대문자로 표기하는 방법
     
   ex) int su;//정수값을 저장 할 수 있는  su 변수 선언  
       su=10;//10을 su 변수에 저장
       System.out.println(su);//화면에 su 변수에 저장된 값 출력	


● 자료형(Data Type) : 값을 표현하거나 변수를 선언하기 위한 단어

  - 기본형(Primitive Type) : 값을 표현하거나 변수를 선언하기 위한 키워드

    >> 숫자형(정수형, 실수형, 문자형) - 연산 가능, 논리형  
  
  - 참조형(Reference Type) : 특정 대상을 표현하거나 대상에 대한 정보를 저장하는 변수를 선언하기 위한 식별자(클래스)

    >> String 클래스 : 문자열을 표현하거나 문자열 정보를 저장하기 위한 클래스
  
  1. 정수형

    1) 정수값 : 소숫점을 가지고 있지 않은 숫자(4byte = -2147483648~2147483647)
    
       10진수 정수값  ex) 100
       8진수 정수값  ex) 0100
       16진수 정수값  ex) 0x100
       long 정수값  ex) 100L  >>  8byte

    2) 정수변수
    
       byte 변수명;//1byte  >> -128~127
       short 변수명;//2byte >> -32768~32767
       int 변수명;//4byte   >> -2147483648~2147483647
       long 변수명;//8byte
       
  2. 실수형    
  
    1) 실수값 : 소숫점이 1개 있는 숫자(8byte) : 부동소숫점 방식으로 표현  
    
      float형 실수값   ex) 1.23F  >> 4byte
      double형 실수값  ex) 1.23
      지수형 실수값    ex) 1.23E-09 
      
    2) 실수변수
    
      float 변수명;//4byte(가수부 유효범위 : 7자리)
      double 변수명;//8byte(가수부 유효범위 : 15자리)
      
  3. 문자형

    1) 문자값 : ' ' 안에 표현(2byte) - 정수값로 표현(ASCII Code 또는 UniCode)
  
       일반 문자값  >>  ex) 'A'  '5'  '한'    
       
       제어 문자값(Escape Character) - Java 언어로 표현할 수 없는 문자를 표현한 문자
       ex) '\n' : Enter     '\t' : Tab     '\0' : NULL문자 
           '\"' : "문자     '\'' : '문자   '\\' : \문자
            
    2) 문자변수 : 문자값 또는 정수값 저장
    
       char 변수명;//2byte(0~65535)
         
  4. 논리형 - 참 또는 거짓를 표현하기 위한 자료형
  
    1) 논리값 : false 또는 true
    
    2) 논리변수 : false 또는 true만 저장 가능하며 관계식의 결과도 저장 가능
    
      boolean 변수명;//1byte
               
  5. 문자열 - 기본형이 아닌 참조형
  
    1) 문자열 : " " 안에 표현 - 문자그룹
    
       ex) "A"  "XYZ"   "대한민국"
       
    2) 문자열 변수 : String 클래스를 이용
    
       String 변수명;


● 형변환 - 자료형(기본형)의 일시적 변환

  1. 자동 형변환
  
    - 자료형이 다른 값를 연산하기 위해 JVM(Java Virtual Machine)이 자료형을 일시적으로 변환       
    
    ex) 3 + 1.5 => int + double => int(double) + double 
        3.0 + 1.5 => 4.5(double) 
     
    - 연산을 위해 작은 자료형을 큰 자료형으로 변환
    
      byte < short < char < int < long < float < double
    
    - int 보다 작은 자료형끼리 연산하면 자동으로 int로 형변환된다.  
    
  2. 강제 형변환
  
    - 원하는 값을 얻기 위해 개발자가 자료형을 강제로 변환
    
    형식) (자료형)대상   => Cast 연산자 이용
    
    ex) int a=5.9;//에러
    
        int a=(int)5.9;//int a=5;

    
● 연산자 - 연산(계산)을 목적으로 제공되는 기호(키워드)

  1. 최우선연산자
  
    ()  : 우선처리연산자  
    
    []  : 배열연산자
    
    .   : 객체연산자
    
  2. 단항연산자
  
    +  : 양수화연산자 : 피연산자에 +1를 곱하는 연산자
    
    -  : 음수화연산자 : 피연산자에 -1를 곱하는 연산자
    
    ~  : Bit Not 연산자 : bit로 표현된 값(0 또는 1)을 반대로 변환하는 연산자

    !  : Not 연산자 : 논리값(false 또는 true)을 반대로 변환하는 연산자
    
          ex) 5 > 3 => true     !(5 > 3) => false
    
    (자료형)  : Cast연산자 : 강제형변환   
    
    ++  : 피연산자는 반드시 정수(문자)변수이며 변수의 값을 1증가 시키는 연산자
    
    --  : 피연산자는 반드시 정수(문자)변수이며 변수의 값을 1감소 시키는 연산자

    new  : 클래스의 생성자를 이용하여 객체를 생성하는 연산자
	
-이항연산자-
  3. 산술연산자  
  
     *      /      % : 나머지연산자
     
     +      -
 
  4. 객체 구분 연산자 - false 또는 true 발생

    instanceof : 객체를 통해 어떤 클래스의 요소에 접근할 수 있는지를 구분하는 연산자
     
  5. 쉬프트연산자 - 정수값을 원하는 방향으로 bit 갯수만큼 이동
  
     << : 왼쪽을 이동(오른쪽은 0으로 채운다)   

       50 << 3 => 00000000 00000000 00000000 00110010 << 3  => 결과 : 00000000 00000000 00000001 1001000 >> 400
                   
     >> : 오른쪽 이동(왼쪽은 부호Bit와 동일한 값으로 채운다.)
     
       50 >> 3 => 00000000 00000000 00000000 00110010 >> 3  => 결과 : 00000000 00000000 00000000 00000110 >> 6
 
      -50 >> 3 => 11111111 11111111 11111111 11001110 >> 3  => 결과 : 11111111 11111111 11111111 11111001 >> -7
                  
     >>> : 오른쪽 이동(왼쪽은 0으로 채운다.)
  
      -50 >>> 3 => 11111111 11111111 11111111 11001110 >>> 3  => 결과 : 00011111 11111111 11111111 11111001 >> 536870905
     
  6. 관계연산자 - true 또는 false의 결과만을 발생
  
     >     >=    <     <=      
  
     ==    !=
  
  7. 논리연산자
  
    1) Bit 논리연산자 - bit 단위로 계산하기 위한 연산자
    
       &  :  논리곱(교집합)	(*)
    
       ^  :  배타적 논리합(차집합)
       
       |  :  논리합(합집합)
                                  
     ex)   01011100        01011100       01011100
         & 10111010      ^ 10111010     | 10111010
         ----------      ----------     ----------
           00011000        11100110       11111110 
    
    2) 일반 논리연산자 - 관계식을 연결하기 위해 사용
  
      && : and 연산자
      
      || : or 연산자
      
     ex) X가 10보다 크고 30보다 작은 값(10<X<30)
     
         =>   X > 10 && X < 30
  
         X가 10보다 작거나 30보다 큰 값
         
         =>  X < 10 || X > 30

-이항연산자-------------------------------------------------------
  
  8. 삼항연산자
  
     조건식?참값:거짓값;
  
  9. 대입연산자 - 왼쪽 피연산자는 반드시 변수
  
      = : 순수대입연산자
      
      *=  /=  %=  +=  -=  <<=  >>=  >>>=  &=  ^=  |= 
       int a = 10;
	a = *2
	a = a*2 
	a =20; 
	계산하여 다시 저장
  
  ※ 단항연산자와 대입연산자는 실행 순서가 반대로 진행
  
    ex)   a + b + c            a = b = c 
          -------→            ←-------